<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.idata365.app.mapper.FamilyMapper">


    <select id="findUsersByFamilyId" resultType="java.util.HashMap" parameterType="java.lang.Long">
		select * from userFamilyRelation where familyId=#{familyId}
	</select>


	<select id="queryFamilyByUserId" resultType="com.idata365.app.entity.FamilyResultBean" parameterType="com.idata365.app.entity.FamilyParamBean">
		select id as myFamilyId, familyName as myFamilyName, imgUrl as myFamilyImgUrl, memberNum, inviteCode from familyInfo where createUserId=#{userId}
	</select>

	<select id="queryFamilyById" resultType="com.idata365.app.entity.FamilyResultBean" parameterType="com.idata365.app.entity.FamilyParamBean">
		select id as myFamilyId, familyName as myFamilyName, imgUrl as myFamilyImgUrl, memberNum, inviteCode from familyInfo where id=#{familyId}
	</select>

	<select id="queryFamilyIdByCompetitorId" resultType="com.idata365.app.entity.FamilyRelationBean" parameterType="com.idata365.app.entity.FamilyRelationBean">
		 select selfFamilyId as familyId1, competitorFamilyId as familyId2 from familyRelation where ((selfFamilyId=#{familyId})
       or  (competitorFamilyId=#{familyId} and relationType=2)) and daystamp=#{daystamp}
	</select>
	
	<select id="queryFightRecordByFamilyId" resultType="com.idata365.app.entity.FamilyRelation">
		 select * from familyRelation where ((selfFamilyId=#{familyId})
       or  (competitorFamilyId=#{familyId} and relationType=2)) and <![CDATA[str_to_date(daystamp, '%Y-%m-%d') <= DATE_ADD(date(now()),INTERVAL -1 DAY)]]> and <![CDATA[ id<#{recordId}]]> order by daystamp desc limit 10
	</select>
	
	<select id="queryFightRecordByFamilyIdFirst" resultType="com.idata365.app.entity.FamilyRelation">
		 select * from familyRelation where ((selfFamilyId=#{familyId})
       or  (competitorFamilyId=#{familyId} and relationType=2)) and <![CDATA[str_to_date(daystamp, '%Y-%m-%d') <= DATE_ADD(date(now()),INTERVAL -1 DAY)]]> order by daystamp desc limit 10
	</select>

	<select id="queryFamilyRelationIds" resultType="java.lang.Long" parameterType="com.idata365.app.entity.FamilyRelationBean">
		select id from familyRelation where (selfFamilyId=#{familyId} or competitorFamilyId=#{familyId}) and daystamp=#{daystamp}
	</select>

	<select id="queryCreateUserId" resultType="java.lang.Long" parameterType="com.idata365.app.entity.FamilyParamBean">
		select createUserId as userId from familyInfo where id=#{familyId}
	</select>
	
	<select id="getLeaderIdByFamilyId" resultType="java.lang.Long" parameterType="java.lang.Long">
		select createUserId as userId from familyInfo where id=#{familyId}
	</select>

	<delete id="deleteUserFamilyRelation" parameterType="com.idata365.app.entity.FamilyParamBean" >
       delete from userFamilyRelation where userId=#{userId} and familyId=#{familyId}
    </delete>

	<update id="updateFamilyRoleLog" parameterType="com.idata365.app.entity.FamilyParamBean">
		update userFamilyRoleLog set endTime=#{endTime} where userId=#{userId} and familyId=#{familyId} and daystamp=#{daystamp}
	</update>
	
	<select id="countByCreateUser" resultType="int" parameterType="com.idata365.app.entity.FamilyParamBean">
		select count(*) from familyInfo where createUserId=#{userId}
	</select>

	<insert id="save" parameterType="com.idata365.app.entity.FamilyParamBean" useGeneratedKeys="true" keyProperty="id" >
		insert into familyInfo(createUserId, familyType, familyName, provinceId, cityId, memberNum, imgUrl, createTimeStr) values(#{userId}, #{familyType}, #{familyName}, #{provinceId}, #{cityId}, 1, #{imgUrl}, #{createTimeStr})
	</insert>
	 	
 	<update id="updateUserStraner" parameterType="com.idata365.app.entity.UsersAccountParamBean">
 		update usersAccount set enableStranger=#{enableStranger} where id=#{userId}
 	</update>
	
	<select id="queryFamilys" parameterType="com.idata365.app.entity.FamilyParamBean" resultType="com.idata365.app.entity.FamilyRandBean">
       select a.*,b.notifyMsg as notifyMsg from (select t1.imgUrl as imgUrl, t1.memberNum as num, t1.familyName as name, t1.id as familyId ,t1.familyType as familyType from familyInfo t1 
			left join (select * from userConfig where type=3) t2 on (t1.createUserId=t2.userId) where (t2.userConfigValue=1 or t2.userConfigValue is null) and t1.createUserId!=#{userId} and t1.id!=999999 and t1.memberNum!=8
			order by familyId asc limit #{startPos}, 10) a left join imNotify b on a.familyId=b.familyId where b.inUse=1
	</select>
	
	<select id="countStranger" parameterType="com.idata365.app.entity.FamilyParamBean" resultType="int">
			select count(1) from familyInfo t1 
			left join (select * from userConfig where type=3) t2 on (t1.createUserId=t2.userId) where (t2.userConfigValue=1 or t2.userConfigValue is null) and t1.createUserId!=#{userId}
    </select>
     
	<insert id="saveUserFamily" parameterType="com.idata365.app.entity.FamilyParamBean" useGeneratedKeys="true" keyProperty="id" >
		insert into userFamilyRelation(userId, familyId, joinTime,role,isLeader) values(#{userId}, #{familyId}, #{joinTime},#{role},#{isLeader})
	</insert>
     
    <select id="queryFamilyByCode" resultType="com.idata365.app.entity.FamilyRandBean" parameterType="com.idata365.app.entity.FamilyParamBean">
    	select imgUrl, memberNum as num, familyName as name, id as familyId, createUserId as userId from familyInfo where inviteCode=#{inviteCode}
    </select>
    
    <select id="queryFamilyByName" resultType="com.idata365.app.entity.FamilyRandBean" parameterType="com.idata365.app.entity.FamilyParamBean">
    	select a.*,b.notifyMsg as notifyMsg from (select t1.imgUrl as imgUrl, t1.memberNum as num, t1.familyName as name, t1.id as familyId ,t1.familyType as familyType from familyInfo t1 
			left join (select * from userConfig where type=3) t2 on (t1.createUserId=t2.userId) where (t2.userConfigValue=1 or t2.userConfigValue is null) 
			and t1.createUserId!=#{userId} and t1.id!=999999 and t1.memberNum!=8 and t1.familyName LIKE #{familyName}
			order by familyId asc) a left join imNotify b on a.familyId=b.familyId where b.inUse=1
    </select>
     
     <!-- 
    <select id="queryFamilyByCreateUserId" resultType="com.idata365.app.entity.FamilyRandBean" parameterType="com.idata365.app.entity.FamilyParamBean">
    	select id as familyId, familyName as name, imgUrl from familyInfo where createUserId=#{userId}
    </select>
      -->
 
 	<insert id="saveFamilyInvite" parameterType="com.idata365.app.entity.FamilyInviteParamBean" useGeneratedKeys="true" keyProperty="id" >
 		insert into familyInvite(familyId, memberUserId, inviteType, createTime, leaveWord,status) values(#{familyId}, #{userId}, #{inviteType}, #{createTime}, #{msgStr},0)
 	</insert>
 	
    <select id="queryApplyInfo" resultType="com.idata365.app.entity.FamilyInviteBean" parameterType="com.idata365.app.entity.FamilyInviteParamBean">
    	select t1.leaveWord as msgStr,t1.memberUserId as userId, familyId, t2.imgUrl as imgUrl, t2.nickName as name, t2.phone as phone,t2.lastLoginTime as lastActiveTime, DATE_FORMAT(t1.createTime, '%Y.%m.%d') as applyDate, t1.status as status from familyInvite t1 
			join usersAccount t2 on (t1.memberUserId = t2.id) where t1.id=#{msgId}
    </select>
    
 	<update id="updateInviteStatus" parameterType="com.idata365.app.entity.FamilyParamBean">
 		update familyInvite set status=#{status} where id=#{msgId}
 	</update>
 
	<select id="queryInviteType" resultType="int">
    	select inviteType from familyInvite where id=#{id}
    </select>
    
    <select id="isInFamily" resultType="int">
    	select count(1) from userFamilyRelation where userId=#{userId} and familyId=#{familyId} and isLeader=0
    </select>
    
    <select id="countByName" resultType="int" parameterType="com.idata365.app.entity.FamilyParamBean">
    	select count(1) from familyInfo where familyName=#{name}
    </select>
 	
 	<update id="updateInviteCode" parameterType="com.idata365.app.entity.FamilyParamBean">
 		update familyInfo set inviteCode=#{inviteCode} where id=#{familyId}
 	</update>
 
    <select id="countByCode" resultType="int" parameterType="com.idata365.app.entity.FamilyParamBean">
    	select count(id) from familyInfo where inviteCode=#{inviteCode}
    </select>
 	
 	<select id="queryFamilyIdByUserId" resultType="java.lang.Long" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select familyId from userFamilyRelation where userId=#{userId}
 	</select>
 	
 	<select id="queryJoinFamilyIdByUserId" resultType="java.lang.Long" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select familyId from userFamilyRelation where userId=#{userId} and isLeader=0
 	</select>
 	<select id="countUsersByFamilyId" resultType="int" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select count(id) from userFamilyRelation where familyId=#{familyId}
 	</select>
 	
 	<select id="countInviteByUserId" resultType="int" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select count(id) from familyInvite where memberUserId=#{userId} and familyId=#{familyId} and status=0 and inviteType=1
 	</select>
 	
 	<select id="countRecruitByUserId" resultType="int" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select count(id) from familyInvite where memberUserId=#{userId} and familyId=#{familyId} and status=0 and inviteType=2
 	</select>
 	
 	<delete id="delInviteByUserId" parameterType="com.idata365.app.entity.FamilyParamBean">
 		delete from familyInvite where memberUserId=#{userId} and familyId=#{familyId}
 	</delete>
 	
 	<select id="queryOwnFamily" resultType="com.idata365.app.entity.FamilyInfoScoreBean" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select t1.id as familyId, imgUrl, familyName as name, t2.role as role from familyInfo t1 
			 join userFamilyRelation t2 on(t1.id=t2.familyId)
			where t1.createUserId=#{userId} and t2.userId=#{userId}
 	</select>
 	
 	<!-- 
 	<select id="queryOwnFamilyOrderNo" resultType="java.lang.Integer" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select yesterdayOrderNo as orderNo from familyScore where familyId=#{familyId} and month=#{month}
 	</select>
 	 -->
 	
 	<select id="queryOwnFamilyOrderNo" resultType="java.lang.Integer" parameterType="com.idata365.app.entity.FamilyParamBean">
 		<![CDATA[
 		select yesterdayOrderNo from familyScore where familyId=#{familyId} and startDay<=#{timeStr} and endDay>=#{timeStr}
		]]>
 	</select>
 	
 	<select id="queryJoinFamily" resultType="com.idata365.app.entity.FamilyInfoScoreBean" parameterType="com.idata365.app.entity.FamilyParamBean">
		select t1.id as familyId, imgUrl, familyName as name, t2.role as role from familyInfo t1 
		 join userFamilyRelation t2 on(t1.id=t2.familyId)
		where t1.id=#{familyId} and t2.userId=#{userId}
 	</select>
 	
 	<select id="queryJoinFamilyOrderNo" resultType="java.lang.Integer" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select yesterdayOrderNo as orderNo from familyScore where familyId=#{familyId} and month=#{month}
 	</select>
 	
 	<!-- <select id="queryAllFamilyOrderNo" resultType="java.util.HashMap">
 		select id,familyType,trophy,familyName,createUserId from familyInfo order by trophy desc limit 20
 	</select> -->
 	
 	<select id="queryAllFamilyOrderNo" resultType="java.util.HashMap">
 		<![CDATA[select a.familyId,a.trophy,a.yesterdayOrderNo,a.familyType,a.startDay,a.endDay,b.familyName,b.createUserId from familyScore a left join familyInfo b 
		on a.familyId=b.id where (yesterdayOrderNo > 0) and a.startDay<=date(now()) and a.endDay>=date(now())
		order by a.yesterdayOrderNo  limit 10]]>
 	</select>
 	
 	<select id="queryFamilyOrderNoByFamilyId" resultType="java.util.HashMap">
 		<![CDATA[select a.familyId,a.trophy,a.yesterdayOrderNo,a.familyType,a.startDay,a.endDay,b.familyName,b.createUserId from familyScore a left join familyInfo b 
		on a.familyId=b.id where a.startDay<=date(now()) and a.endDay>=date(now()) and a.familyId=#{familyId}]]>
 	</select>
 	
 	
 	<select id="queryFamilyByFId" resultType="java.util.HashMap">
 		select id,familyType,trophy,familyName,createUserId,memberNum from familyInfo where id=#{familyId}
 	</select>
 	  
 	<!-- <select id="queryFamilyOrderByFId" resultType="java.lang.Integer">
       select count(distinct(trophy))+1
       FROM  familyInfo where trophy>(select trophy from familyInfo where id=#{familyId})
 	</select> -->
 	
 	<select id="getInfoByFamilyId" resultType="java.util.HashMap">
 		select familyId,yesterdayOrderNo,familyType,trophy from familyScore where <![CDATA[ endDay>=#{daystamp} and startDay<=#{daystamp}]]> and familyId=#{familyId}
 	</select>
 	 
 	<select id="queryUserIdsWithSpeedPenal" resultType="java.lang.Long" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select t1.userId as userId from userFamilyRelation t1 
			join userScoreDayStat t2 on (t1.userId=t2.userId) 
			where t1.familyid=#{familyId} and t2.daystamp=#{daystamp} and t2.speedTimes > t2.speedPenalTimes group by userId order by userId asc
 	</select>
 	
 	<update id="updateSpeedPenalTimes" parameterType="com.idata365.app.entity.FamilyParamBean">
 		update userScoreDayStat set speedPenalTimes=speedPenalTimes+1 where userId=#{userId} and daystamp=#{daystamp}
 	</update>
 	
 	<select id="queryUserIdsWithBrakePenal" resultType="java.lang.Long" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select t1.userId as userId from userFamilyRelation t1 
			join userScoreDayStat t2 on (t1.userId=t2.userId) 
			where t1.familyid=#{familyId} and t2.daystamp=#{daystamp} and t2.brakeTimes > t2.brakePenalTimes group by userId order by userId asc
 	</select>
 	
 	<update id="updateBrakePenalTimes" parameterType="com.idata365.app.entity.FamilyParamBean">
 		update userScoreDayStat set brakePenalTimes=brakePenalTimes+1 where userId=#{userId} and daystamp=#{daystamp}
 	</update>
 	 	
 	<select id="queryUserIdsWithTurnPenal" resultType="java.lang.Long" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select t1.userId as userId from userFamilyRelation t1 
			join userScoreDayStat t2 on (t1.userId=t2.userId) 
			where t1.familyid=#{familyId} and t2.daystamp=#{daystamp} and t2.turnTimes > t2.turnPenalTimes group by userId order by userId asc
 	</select>
 	
 	<update id="updateTurnPenalTimes" parameterType="com.idata365.app.entity.FamilyParamBean">
 		update userScoreDayStat set turnPenalTimes=turnPenalTimes+1 where userId=#{userId} and daystamp=#{daystamp}
 	</update>
 	 	
 	<select id="queryUserIdsWithOverspeedPenal" resultType="java.lang.Long" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select t1.userId as userId from userFamilyRelation t1 
			join userScoreDayStat t2 on (t1.userId=t2.userId) 
			where t1.familyid=#{familyId} and t2.daystamp=#{daystamp} and t2.overspeedTimes > t2.overspeedPenalTimes group by userId order by userId asc
 	</select>
 	
 	<update id="updateOverspeedPenalTimes" parameterType="com.idata365.app.entity.FamilyParamBean">
 		update userScoreDayStat set overspeedTimes=overspeedTimes+1 where userId=#{userId} and daystamp=#{daystamp}
 	</update>
 	 	
 	<select id="queryUserIdsWithNightDrivePenal" resultType="java.lang.Long" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select t1.userId as userId from userFamilyRelation t1 
			join userScoreDayStat t2 on (t1.userId=t2.userId) 
			where t1.familyid=#{familyId} and t2.daystamp=#{daystamp} and t2.nightDriveTimes > t2.nightDrivePenalTimes group by userId order by userId asc
 	</select>
 	
 	<update id="updateNightDrivePenalTimes" parameterType="com.idata365.app.entity.FamilyParamBean">
 		update userScoreDayStat set nightDriveTimes=nightDriveTimes+1 where userId=#{userId} and daystamp=#{daystamp}
 	</update>
 	 	
 	<select id="queryUserIdsWithTiredDrivePenal" resultType="java.lang.Long" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select t1.userId as userId from userFamilyRelation t1 
			join userScoreDayStat t2 on (t1.userId=t2.userId) 
			where t1.familyid=#{familyId} and t2.daystamp=#{daystamp} and t2.tiredDriveTimes > t2.tiredDrivePenalTimes group by userId order by userId asc
 	</select>
 	
 	<update id="updateTiredDrivePenalTimes" parameterType="com.idata365.app.entity.FamilyParamBean">
 		update userScoreDayStat set tiredDriveTimes=tiredDriveTimes+1 where userId=#{userId} and daystamp=#{daystamp}
 	</update>
 	 	
 	<select id="queryUserIdsWithIllegalStopPenal" resultType="java.lang.Long" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select t1.userId as userId from userFamilyRelation t1 
			join userScoreDayStat t2 on (t1.userId=t2.userId) 
			where t1.familyid=#{familyId} and t2.daystamp=#{daystamp} and t2.illegalStopTimes > t2.illegalStopPenalTimes group by userId order by userId asc
 	</select>
 	
 	<update id="updateIllegalStopPenalTimes" parameterType="com.idata365.app.entity.FamilyParamBean">
 		update userScoreDayStat set illegalStopTimes=illegalStopTimes+1 where userId=#{userId} and daystamp=#{daystamp}
 	</update>
 	 	
 	<select id="queryFamilyInfo" resultType="com.idata365.app.entity.FamilyInfoBean" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select * from familyInfo where id=#{familyId}
 	</select>
 	
 	<select id="countByType" resultType="int" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select count(id) from familyInfo where familyType=#{familyType} and id!=999999
 	</select>
 	 	
 	<select id="queryFamilyByType" resultType="com.idata365.app.entity.FamilyInfoBean" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select id, familyType from familyInfo where familyType=#{familyType} order by id asc
 	</select>
 	
 	<insert id="saveFamilyHistory" parameterType="com.idata365.app.entity.FamilyHistoryParamBean" useGeneratedKeys="true" keyProperty="id" >
 		insert into familyHistory(familyId, record) values(#{familyId}, #{record})
 	</insert>
 	
 	<select id="countUsers" resultType="int">
 		select count(1) from usersAccount
 	</select>
 	
 	<select id="countUnRead" resultType="int" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select count(id) from message where toUserId=#{userId} and isRead=0
 	</select>
 	
 	<select id="countUnReadChats" resultType="int" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select count(id) from imMsg where familyId=#{familyId} and toUserId=#{userId} and isRead=0
 	</select>
 	
 	<select id="getFamilyUsers" resultType="java.util.HashMap" parameterType="java.lang.Long">
 		select * from userFamilyRelation where familyId=#{familyId}
 	</select>
 	<select id="getFamilyUsersMoreInfo" resultType="java.util.HashMap" parameterType="java.lang.Long">
 		select a.*,b.nickName,b.imgUrl from userFamilyRelation a left join usersAccount b on a.userId=b.id  where a.familyId=#{familyId}
 	</select>
 	<select id="getFamilyByUserId" resultType="java.util.HashMap" parameterType="java.lang.Long">
 		select * from userFamilyRelation where userId=#{userId}
 	</select>
 	
 	
 	<select id="queryTaskFlag" resultType="int" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select taskFlag from usersAccount where id=#{userId}
 	</select>
 	
 	<select id="queryHabits" resultType="java.lang.Long" parameterType="com.idata365.app.entity.FamilyParamBean">
 		select habitId from userTravelHistory where userId=#{userId} and endTime between #{startTime} and #{endTime}
 	</select>
 	
 	<select id="countUnReceive" resultType="int" parameterType="java.util.List">
 		select count(id) from userTravelLottery where hadGet=0 and habitId in 
 		<foreach collection="list" item="item" open="(" separator="," close=")">
			${item}
		</foreach>
 	</select>
 	
 	<update id="updateTaskFlag" parameterType="com.idata365.app.entity.FamilyParamBean">
 		update usersAccount set taskFlag=1 where id=#{userId}
 	</update>
 	
 	<select id="queryStartEnd" resultType="com.idata365.app.entity.UserFamilyRoleLogBean" parameterType="com.idata365.app.entity.UserFamilyRoleLogParamBean">
 		select startTime, endTime from userFamilyRoleLog where userId=#{userId} and familyId=#{familyId} order by id desc limit 0, 30
 	</select>
 	
 	<!-- 进行活跃度处理 -->
 	<update id="addFamilyMemberNum"   parameterType="java.lang.Long">
       update  
            familyInfo
            set memberNum=memberNum+1
            where id=#{familyId}
    </update>
    <update id="removeFamilyMemberNum"   parameterType="java.lang.Long">
       update  
            familyInfo
                set memberNum=memberNum-1
            where id=#{familyId}
    </update>
    
   	<update id="updateFamilyActiveLevel"   parameterType="java.lang.Long">
       update  
            familyInfo
           set activeLevel=concat(memberNum,driveFlag)
            where id=#{familyId}
    </update>
	
	<!-- 锁定匹配用户 -->
	<update id="updateFamilyPkKeyGet"   parameterType="java.util.HashMap">
 	    update  familyInfo set matchKey=#{matchKey}  where familyType=#{familyType} and id!=#{id} and id!=999999
 	     order by activeLevel desc limit 1
    </update>
    <select id="getCompetitorFamilyId" resultType="long" parameterType="java.util.HashMap">
 		 select id  from familyInfo where matchKey=#{matchKey} and id!=#{id}
 	</select>
   	<update id="updateFamilyPkSelfKey"   parameterType="java.util.HashMap">
 	    update familyInfo set matchKey=#{matchKey} where  id=#{id}
    </update>
     <insert id="insertPkRelation" parameterType="java.util.HashMap">
		 INSERT IGNORE INTO  familyRelation
		 (selfFamilyId,competitorFamilyId,daystamp)
		  VALUES
    		(#{selfFamilyId},#{competitorFamilyId},#{daystamp}) 
	</insert>
     <insert id="insertFamilyDriveDayStat" parameterType="com.idata365.app.entity.FamilyDriveDayStat">
		 INSERT IGNORE INTO  familyDriveDayStat
		 (familyId,daystamp,familyType,familyFlag)
		 VALUES(
		 #{familyId},#{daystamp},#{familyType},#{familyFlag})
	</insert>
	
	<select id="queryCountJoinFamily" resultType="java.lang.Integer">
 		select count(1) from userFamilyRelation where userId=#{userId} and isLeader=0
 	</select>
 	
 	<select id="queryCountCreateFamily" resultType="java.lang.Integer">
 		select count(1) from userFamilyRelation where userId=#{userId} and isLeader=1
 	</select>
 	
 	<select id="queryFamilyTypeOfCreateFamily" resultType="java.lang.Integer">
 		select b.familyType from userFamilyRelation a left join familyInfo b on a.familyId=b.id where a.userId=#{userId} and a.isLeader=1
 	</select>
 	
 	<select id="queryCreateFamilyId" resultType="long">
 		 select familyId from userFamilyRelation where userId=#{userId} and isLeader=1 order by joinTime desc limit 1
 	</select>
 	
 	<select id="queryMemberNumByFId" resultType="Integer">
 		 select memberNum from familyInfo where id=#{familyId}
 	</select>
 	
 	<select id="queryJoinFamilyId" resultType="long">
 		 select familyId from userFamilyRelation where userId=#{userId} and isLeader=0 order by joinTime desc limit 1
 	</select>

	<select id="countAllCanRecruit" resultType="int">
		SELECT COUNT(1) FROM usersAccount a LEFT JOIN ( SELECT * FROM userConfig WHERE type = 2 ) b ON a.id = b.userId 
		WHERE a.lastLoginTime > TIMESTAMP ( now(), '-168:00:00' )
			AND ( b.userConfigValue = 1 OR ( b.userConfigValue IS NULL ) ) 
			AND a.id NOT IN ( SELECT userId FROM userFamilyRelation WHERE familyId = #{familyId} ) 
			AND a.id != #{userId}
    </select>

	<select id="allCanRecruitList" resultType="java.util.HashMap">
		select c.*,d.familyId as joinFamilyId from(SELECT a.id AS userId,a.imgUrl AS imgUrl,a.nickName AS nickName,a.lastLoginTime AS lastLoginTime FROM usersAccount a
			LEFT JOIN ( SELECT * FROM userConfig WHERE type = 2 ) b ON a.id = b.userId 
		WHERE a.lastLoginTime > TIMESTAMP ( now(), '-168:00:00' )
			AND ( b.userConfigValue = 1 OR ( b.userConfigValue IS NULL ) ) 
			AND a.id NOT IN ( SELECT userId FROM userFamilyRelation WHERE familyId = #{familyId} ) 
			AND a.id != #{userId}
		ORDER BY a.lastLoginTime DESC limit #{startPos}, 10) c left join
		(select * from userFamilyRelation where familyId!=#{familyId} and isLeader=0) d on c.userId=d.userId
 	</select>
 	
 	<select id="canRecruitListByName" resultType="java.util.HashMap">
 		select c.*,d.familyId as joinFamilyId from(SELECT a.id AS userId,a.imgUrl AS imgUrl,a.nickName AS nickName,a.lastLoginTime AS lastLoginTime 
		FROM usersAccount a LEFT JOIN ( SELECT * FROM userConfig WHERE type = 2 ) b ON a.id = b.userId 
		WHERE a.lastLoginTime > TIMESTAMP ( now(), '-168:00:00' )
			AND ( b.userConfigValue = 1 OR ( b.userConfigValue IS NULL ) ) 
			AND a.id NOT IN ( SELECT userId FROM userFamilyRelation WHERE familyId = #{familyId} ) 
			AND a.id != #{userId}
			AND a.nickName LIKE #{nickName}
		ORDER BY
			a.lastLoginTime DESC) c left join
		(select * from userFamilyRelation where familyId!=#{familyId} and isLeader=0) d on c.userId=d.userId 
 	</select>
    
    <update id="updateUserOtherApplyStatus" >
 	    update familyInvite set status=2 where memberUserId=#{userId} and status=0 and inviteType=1
    </update>
    
    <update id="updateOtherFamilyInviteStatus" >
 	    update familyInvite set status=2 where memberUserId=#{userId} and status=0 and inviteType=2
    </update>
    
    <update id="updateFamilyInfo" >
 	    update familyInfo set familyName=#{familyName},imgUrl=#{imgUrl} where id=#{familyId}
    </update>
    
  </mapper>